import { Box, ChakraProvider } from "@chakra-ui/react";
import { DecisionMode, FlagshipProvider } from "@flagship.io/react-sdk";
import Head from "next/head";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";
import { API_KEY, ENV_ID } from "../config";
import "../styles/globals.css";

function MyApp({ Component, pageProps }) {
  const router = useRouter();

  const [isVip, setIsVip] = useState(false);
  const [isLoadingUser, setIsLoadingUser] = useState(false);

  // Simulate get user profile from API
  useEffect(() => {
    setIsVip(false);
    setIsLoadingUser(true);
    window.setTimeout(() => {
      setIsVip(true);
      setIsLoadingUser(false);
    }, 5000);
  }, [router.pathname]);

  const visitorData = pageProps.initialVisitorData || {
    visitor_id: "1",
    context: {},
  };
  visitorData.context = { ...{ isVip }, ...visitorData.context };

  return (
    <FlagshipProvider
      visitorData={visitorData}
      initialFlagsData={pageProps.initialFlagsData} //  set initial flags fetched server side
      initialBucketing={pageProps.initialBucketing}
      envId={ENV_ID}
      apiKey={API_KEY}
      pollingInterval={60}
      decisionMode={
        pageProps.decisionMode === "bucketing"
          ? DecisionMode.BUCKETING
          : DecisionMode.DECISION_API
      }
    >
      <ChakraProvider>
        <Head>
          <title>Next.js &amp; Flagship Demo</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <Box m={8}>
          <Component {...pageProps} isLoadingUser={isLoadingUser} />
        </Box>
      </ChakraProvider>
    </FlagshipProvider>
  );
}

export default MyApp;
