import {
  Box,
  Button,
  ChakraProvider,
  Container,
  Stack,
  Text,
} from "@chakra-ui/react";
import { DecisionMode, FlagshipProvider } from "@flagship.io/react-sdk";
import Head from "next/head";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";
import Loader from "../components/common/Loader";
import { API_KEY, ENV_ID } from "../config";
import "../styles/globals.css";

function MyApp({ Component, pageProps }) {
  const router = useRouter();

  const [isVip, setIsVip] = useState(false);
  const [isLoadingUser, setIsLoadingUser] = useState(false);
  const [loadingPage, setLoadingPage] = useState(false);
  const [containerClass, setContainerClass] = useState("");

  useEffect(() => {
    const start = () => setLoadingPage(true);
    const end = () => setLoadingPage(false);
    router.events.on("routeChangeStart", start);
    router.events.on("routeChangeComplete", end);
    router.events.on("routeChangeError", end);
    return () => {
      router.events.off("routeChangeStart", start);
      router.events.off("routeChangeComplete", end);
      router.events.off("routeChangeError", end);
    };
  }, [router]);

  // Simulate get user profile from API
  useEffect(() => {
    setIsVip(false);
    setIsLoadingUser(true);
    window.setTimeout(() => {
      setIsVip(true);
      setIsLoadingUser(false);
    }, 5000);
  }, [router.pathname]);

  useEffect(() => {
    window.addEventListener("scroll", () => {
      setContainerClass(document.documentElement.scrollTop && "scrolled");
    });
  }, []);

  const visitorData = pageProps.initialVisitorData || {
    visitor_id: "1",
    context: {},
  };
  visitorData.context = { ...{ isVip }, ...visitorData.context };

  return (
    <FlagshipProvider
      visitorData={visitorData}
      initialFlagsData={pageProps.initialFlagsData} //  set initial flags fetched server side
      initialBucketing={pageProps.initialBucketing}
      envId={ENV_ID}
      apiKey={API_KEY}
      pollingInterval={60}
      decisionMode={pageProps.decisionMode || DecisionMode.DECISION_API}
    >
      <ChakraProvider>
        <Head>
          <title>Next.js &amp; Flagship Demo</title>
          <meta name="description" content="Generated by create next app" />
          <meta
            name="viewport"
            content="width=device-width, initial-scale=1"
          ></meta>
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <Container maxW="4xl" pt={8} id="main" className={containerClass}>
          {loadingPage && <Loader />}
          {!loadingPage && (
            <Component {...pageProps} isLoadingUser={isLoadingUser} />
          )}

          <Box bg="gray.100" color="gray.900" p={4} mt={6} className="footer">
            <Stack
              maxW={"6xl"}
              direction={{ base: "column", md: "row" }}
              spacing={4}
              justify={{ base: "center", md: "space-between" }}
              align={{ base: "center", md: "center" }}
            >
              <Text>Â© 2022 Flagship. All rights reserved</Text>
              <Button
                as="a"
                variant="link"
                href="https://docs.developers.flagship.io"
                color="gray.700"
              >
                Go to the developers documentation
              </Button>
            </Stack>
          </Box>
        </Container>
      </ChakraProvider>
    </FlagshipProvider>
  );
}

export default MyApp;
